package main

import (
	"fmt"
	"sync"
)

func main() {
	third()
}

//1.–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç ùëõ –ø–æ—Ç–æ–∫–æ–≤ –∏ –¥–æ–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Ö –≤—Å–µ—Ö
func first() {
	var wg = sync.WaitGroup{}

	for i := 0; i < 10; i++ {
		wg.Add(1)
		go func(i int) {

			fmt.Println("–†–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Ç–æ–∫ : ", i)
			wg.Done()

		}(i)

	}
	wg.Wait()

	fmt.Println("–î–æ–∂–¥–∞–ª–∏—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ 10 –ø–æ—Ç–æ–∫–æ–≤.")

}

//2.–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º—å—é—Ç–µ–∫—Å–∞ —Å –ø–æ–º–æ—â—å—é defer
func second(ourMutex sync.Mutex, err error) string {
	ourMutex.Lock()
	defer ourMutex.Unlock()

	if err != nil {
		return "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ mutex"
	}
	return "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ mutex"
}

//3.—Ç—É—Ç —è –ø–æ–ø—ã—Ç–∞–ª–∞—Å—å –∏–∑–æ–±—Ä–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –∫–∞–Ω–∞–ª–æ–º –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
//–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–ª–∞—Ç—å lock –∏–ª–∏ rlock...–Ω–µ —É–¥–∞–ª–æ—Å—å.

func third() {
	var (
		rlock sync.RWMutex
		Lock  sync.Mutex
		wg    = sync.WaitGroup{}
		//	j  = 0
		ch chan int
	)

	ch <- 0
	for i := 0; i < 16; {
		wg.Add(1)
		fmt.Println(i)

		i = <-ch
		if i < 4 {

			go func() {
				Lock.Lock()
				i++
				ch <- i
				Lock.Unlock()
				wg.Done()
			}()

		} else {

			go func(i int) {
				rlock.RLock()
				i++
				ch <- i
				rlock.RLock()
				wg.Done()
			}(i)

		}
	}
	wg.Wait()
}
